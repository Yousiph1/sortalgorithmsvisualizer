import React,{useState,useRef} from  "react"
import Bars from '../bars/bars'
import './board.css'
import {bubbleSort,selectionSort,insertionSort} from '../algorithms'

export default function Board() {
let sample = [19,14,21,15,20,1,4,9,14,19,22,24,5,17,3,16,1,24,3,25,20,19,4,4,18,4,11,4,5,9]
sample = sample.map(a => {
  return {
    value: a,
    current:false,
    active: false,
    toSwap: false,
    inPlace: false,
  }
})
const [bars,setBars] = useState(sample)
const [length, setLength] = useState(sample.length)
const [speed, setSpeed] = useState("normal")
const ref = useRef()
const numsRef = useRef()
const algo = useRef()

const generateSample = () => {
  ref.current.style.display = 'block'
}


const animateBubbleSort = (bigArr) => {
  let spd = 100;
  switch (speed) {
    case "very slow":
        spd = 1000
      break;
    case "slow":
        spd = 400
      break;
    case "fast":
       spd = 20
       break;
    case "very fast":
       spd = 1;
       break;
    default:
       spd = 100
  }

   for(let i = 0; i < bigArr.length; i++) {
     setTimeout(()=> {
       setBars(bigArr[i])
     },i * spd)
   }
}

const start = () => {
  if(!bars) return
  let selectedAlgorithm = algo.current.value
  switch (selectedAlgorithm) {
    case "bubble sort":
       animateBubbleSort(bubbleSort(bars))
      break;
    case "selection sort":
       animateBubbleSort(selectionSort(bars))
       break;
    default:
      animateBubbleSort(insertionSort(bars))
  }
}


const newSample = () => {
  let bars = numsRef.current.value.split(",").filter(a => Number(a) && Number(a) < 26).map(a => Number(a))

  bars = length + 1 >= 100 ?  bars.splice(0,99): length < 1 ? bars.splice(0,2) : bars.splice(0,length + 1)
  bars = bars.map(a => {
    return {
      value: a,
      active: false,
      toSwap: false,
      inPlace: false,
      current: false
    }
  })
  if(bars.length) setBars(bars)
  ref.current.style.display = "none"
}

const genRandom = () => {
  let arr = []
  for(let i = 0; i < length; i++) {
    arr.push(Math.floor(Math.random() * 25 + 1))
  }
  numsRef.current.value = arr.join(",")
}

const lengthChanged = (e) => {
   e.target.value > 99 ? setLength(99) : e.target.value < 2 ? setLength(2) : setLength(e.target.value)
}

return (

  <main>
  <div id = "tour">
   <h3>Tour</h3>
   <p>select algorithm and click start to start animation</p>
   <br/>
   <h5>click on "generate sample" to configure<br/></h5>
   <ul>
   <li>number of bars (max: 99)</li>
   <li>generate random values by clicking "rand" button</li>
   <li>you can manually change the values generated by rand</li>
   <li>select the speed of the animation (defaults to normal)</li>
   <li>click the "done" button to update changes</li>
   </ul>
   <button onClick = {()=> document.getElementById("tour").style.display = "none"}>ok</button>
  </div>
  <div className = 'controls-container'>
  <select ref = {algo}>
  <option value = 'bubble sort'>bubble sort</option>
  <option value = 'selection sort'>selection sort </option>
  <option value = 'insertion sort'>insertion sort </option>
  </select>
  <button onClick = {start}>start</button>
  <button onClick = {generateSample}>generate sample </button>
  </div>
  <div className = 'generate-config' ref = {ref}>
  <button  id = "close-button"
  onClick = {(e) => {e.target.parentNode.style.display = 'none'}}>X</button>
  <div className = 'config-input'>
  <label htmlFor = "bars-length">bars no.<br />
  <input type = "number" id = "bar-length" value = {length}
   onChange = {lengthChanged} min = "2" max = "99"/>
   </label>
   </div>
   <label htmlFor = "nums">sample nums <button onClick = {genRandom}>rand.</button> <br/>
   <input type = "text" id = "nums" ref = {numsRef}/>
   </label>
   <h6 style= {{color: "white"}}>animation speed</h6>
   <label>v. slow <input type = "radio" value = "very slow" name = "animation-speed"
   onChange = {(e)=>setSpeed(e.target.value)}/></label>
   <label> slow <input type = "radio" value = "slow" name = "animation-speed"
    onChange = {(e)=>setSpeed(e.target.value)}/></label>
   <br />
   <label>normal <input type = "radio" value = "normal" name = "animation-speed"
    onChange = {(e)=>setSpeed(e.target.value)}/></label>
   <label> fast <input type = "radio" value = "fast" name = "animation-speed"
    onChange = {(e)=>setSpeed(e.target.value)}/></label>
   <label> very fast <input type = "radio" value = "very fast" name = "animation-speed"
    onChange = {(e)=>setSpeed(e.target.value)}/></label>
    <br />
   <button onClick = {newSample}>done</button>
   </div>
  <section className = "bars-container">
 {
   bars.map((bar,indx) => {
     return <Bars height = {bar.value * 18} key = {indx}
                  current = {bar.current} active = {bar.active} id = {indx}
                  toSwap = {bar.toSwap} inPlace = {bar.inPlace} />
   })
 }
  </section>
  </main>
)
}
